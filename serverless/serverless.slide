Gettin' Jiggy with Serverless 

A closer look at AWS lambdas
Tags: serverless, lambda, aws

Douglas Chimento
Outbrain Inc.
dchimento@outbrain.com
https://www.dougchimento.com/presentations/serverless


* Agenda
- What?
- Evolution
- Internals
- Examples
- Pitfalls
(Still trying to figure out the order)
: this is a note


* What does serverless mean?

- No servers to provision or manage
- Scale with usage
- Built in fault-tolerance
- Nerver pay for idle/unused capacity

* Lexicon
- FaaS - Function as as service
- Bass - Backend as as service


* Evolution
bare metal -> vitrual machines -> containers -> *serverless*
(Use diagram with Icons ..etc)


* Offerings
- AWS lambda (2015)
- Google Cloud Functions
- Azure Functions
(Add links)

* What is AWS Lambda?
AWS Lambda is an *event-driven* compute service that runs code
in response to events and automatically manages the compute
resources required by that code


* Which events?
- Manual
- API Gateway (HTTP requests)
- CloudFormation
- Code Commit
- Congito
- DynamoDB
- Kinesis
- S3
- SNS
- AutoScalling

* Language Support
- NodeJs
- Python
- Java (???)
- Go
- C#

* Lambda in action
(reformat)
.background lambda_in_action.png
.html lambda_in_action.html


* How do I use it?
- Pick a language (please no java)
- Import AWS SDK dependency
- Write a handler
.image southpark.png 400 800

* I code therefore I think
.code example1.go

* How do I deploy?
- Build/Compile code
- Create zip with all dependencies
- Use AWS console or AWS CLI to create lambda

  aws lambda create-function \ 
    --region us-west-2 \
    --function-name lambdafn \
    --zip-file lambda.zip \
    --handler main.helloword \
    --runtime go1.x  \

* How do I invoke?
- AWS console or AWS cli

  aws lambda invoke \
    --invocation-type RequestResponse \
    --function-name lambdash-function-XINM2V7BQ5I8   \
    --log-type Tail \
    --payload '{"cmd": "echo Hello World"}'
    
  {
    "LogResult": "U1RBUlQgUmVxdWVzdElkOiAyMjg2Njg5My0yMTg5LTExZTgtOTIxZS1lZjAwNDVjNzRkMzEgVmVyc2lvbjogJExBVEVTVApFTkQgUmVxdWVzdElkOiAyMjg2Njg5My0yMTg5LTExZTgtOTIxZS1lZjAwNDVjNzRkMzEKUkVQT1JUIFJlcXVlc3RJZDogMjI4NjY4OTMtMjE4OS0xMWU4LTkyMWUtZWYwMDQ1Yzc0ZDMxCUR1cmF0aW9uOiAzMDQuMDIgbXMJQmlsbGVkIER1cmF0aW9uOiA0MDAgbXMgCU1lbW9yeSBTaXplOiAxMjggTUIJTWF4IE1lbW9yeSBVc2VkOiAzOSBNQgkK", 
    "ExecutedVersion": "$LATEST", 
    "StatusCode": 200
  }

You can also do a dry run invocations
*Note output log is base64 encoded
base64 --decode


* Oprations details
- Limits
- OS & specs
- Environment


* Limits
.html limits.html

* OS
-Linux kernel *4.9.75-25.55.amzn1.x86_64*
-AMI (os image) [[https://console.aws.amazon.com/ec2/v2/home#Images:visibility=public-images;search=amzn-ami-hvm-2017.03.1.20170812-x86_64-gp2][amzn-ami-hvm-2017.03.1.20170812-x86_64-gp2]]
-2x *Xeon* E5-2680 v2 @ 2.80GHz (vulneable to meltdown/spectre)
-Most likely runs in docker containers
.image linux.png 100 100
.image docker.png  100 100


* Env Part 1
(reformat)
[[https://docs.aws.amazon.com/lambda/latest/dg/current-supported-versions.html][Aws docs]]
.html env1.html

* Env Part 2
(reformat)
.html env2.html

* Logging
(more details and screen shots)
- CloudWatch

* Bottom line - What's really going on?
- The unzipped file of your code is on some local storage
- Some docker contain *mounts* that code and runs something like this:
  #!/bin/bash
  ...
  set enviroment variables
  set up logger
  set up metrics
  etc
  ... 
  /usr/bin/timeout 300s \
    docker run -t -i --rm  --env-file lambda.env --workdir /var/task \
      --volume /path/to/code:/var/task --memory 512  amazonlinux:2017.03 \
      lambda-function-wrapper.sh
  ...
  capture exit code
  clean up
  and of course bill! 


* Pricing
(reformat)
.html pricing.html

* Pricing Example
(reformat)
If you allocated 512MB of memory to your function, executed it 3 million times in one month, and it ran for 1 second each time, your charges would be calculated as follows:
Monthly compute charges

The monthly compute price is $0.00001667 per GB-s and the free tier provides 400,000 GB-s.

Total compute (seconds) = 3M * (1s) = 3,000,000 seconds
Total compute (GB-s) = 3,000,000 * 512MB/1024 = 1,500,000 GB-s
Total compute – Free tier compute = Monthly billable compute GB- s
1,500,000 GB-s – 400,000 free tier GB-s = 1,100,000 GB-s
Monthly compute charges = 1,100,000 * $0.00001667 = $18.34

Monthly request charges
The monthly request price is $0.20 per 1 million requests and the free tier provides 1M requests per month.
Total requests – Free tier requests = Monthly billable requests
3M requests – 1M free tier requests = 2M Monthly billable requests
Monthly request charges = 2M * $0.2/M = $0.40

Total monthly charges
Total charges = Compute charges + Request charges = $18.34 + $0.40 = $18.74 per month


* Examples

* Show me the code
.code example2.go

* Example - AdServer
Let’s think about an online ad system - when a user clicks on an advertisement you want to very quickly redirect them to the target of the ad, but at the same time you need to collect the fact that the click has happened so that you can charge the advertiser. 

.image ad_server_click.svg

* Example - Image thumbnail
(reformat)
.background image_thumbnail.png 
.html image_thumbnail.html

* Best Paractices
- Code as infrasturcture 
- Function alias
- Alerts (billing)
- Testing procedures

* Gotchas
- Logging
- Too many functions
- Permissions
- Default no internet

* The future and ecosystems
(TODO)

* Resources
- lambdash
- Openstack
- serverless
- aws (https://aws.amazon.com/documentation/lambda/)

